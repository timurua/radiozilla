/* tslint:disable */
/* eslint-disable */
/**
 * apiservice
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface FADomainStats
 */
export interface FADomainStats {
    /**
     * 
     * @type {string}
     * @memberof FADomainStats
     */
    'domain': string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof FADomainStats
     */
    'frequent_subpaths': { [key: string]: number; };
}
/**
 * 
 * @export
 * @interface FAFrontendAudio
 */
export interface FAFrontendAudio {
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'normalized_url_hash': string;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'normalized_url': string;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'description': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'audio_text': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'image_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'audio_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'author_id': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'channel_id': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'published_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudio
     */
    'uploaded_at': string | null;
    /**
     * 
     * @type {number}
     * @memberof FAFrontendAudio
     */
    'duration': number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAFrontendAudio
     */
    'topics': Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof FAFrontendAudio
     */
    'similarity_score'?: number | null;
}
/**
 * 
 * @export
 * @interface FAFrontendAudioPlay
 */
export interface FAFrontendAudioPlay {
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudioPlay
     */
    'user_id': string;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudioPlay
     */
    'audio_id': string;
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudioPlay
     */
    'played_at': string;
    /**
     * 
     * @type {number}
     * @memberof FAFrontendAudioPlay
     */
    'duration_seconds': number;
}
/**
 * 
 * @export
 * @interface FAFrontendAudioSearchResult
 */
export interface FAFrontendAudioSearchResult {
    /**
     * 
     * @type {string}
     * @memberof FAFrontendAudioSearchResult
     */
    'normalized_url_hash': string;
    /**
     * 
     * @type {number}
     * @memberof FAFrontendAudioSearchResult
     */
    'similarity_score': number;
}
/**
 * 
 * @export
 * @interface FAScraperStats
 */
export interface FAScraperStats {
    /**
     * 
     * @type {number}
     * @memberof FAScraperStats
     */
    'queued_urls_count': number;
    /**
     * 
     * @type {number}
     * @memberof FAScraperStats
     */
    'requested_urls_count': number;
    /**
     * 
     * @type {number}
     * @memberof FAScraperStats
     */
    'success_urls_count': number;
    /**
     * 
     * @type {number}
     * @memberof FAScraperStats
     */
    'error_urls_count': number;
    /**
     * 
     * @type {number}
     * @memberof FAScraperStats
     */
    'skipped_urls_count': number;
    /**
     * 
     * @type {{ [key: string]: FADomainStats; }}
     * @memberof FAScraperStats
     */
    'domain_stats': { [key: string]: FADomainStats; };
}
/**
 * 
 * @export
 * @interface FAWebPage
 */
export interface FAWebPage {
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'normalized_url_hash': string;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'normalized_url': string;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof FAWebPage
     */
    'status_code': number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof FAWebPage
     */
    'headers': { [key: string]: string; } | null;
    /**
     * 
     * @type {File}
     * @memberof FAWebPage
     */
    'content': File | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'content_type': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'content_charset': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'metadata_title': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'metadata_description': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'metadata_image_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'metadata_published_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'canonical_url': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAWebPage
     */
    'outgoing_urls': Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPage
     */
    'visible_text': string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAWebPage
     */
    'sitemap_urls': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAWebPage
     */
    'robots_content': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAWebPage
     */
    'text_chunks': Array<string> | null;
}
/**
 * 
 * @export
 * @interface FAWebPageChannel
 */
export interface FAWebPageChannel {
    /**
     * 
     * @type {string}
     * @memberof FAWebPageChannel
     */
    'normalized_url_hash': string;
    /**
     * 
     * @type {string}
     * @memberof FAWebPageChannel
     */
    'normalized_url': string;
    /**
     * 
     * @type {string}
     * @memberof FAWebPageChannel
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof FAWebPageChannel
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPageChannel
     */
    'description': string | null;
    /**
     * 
     * @type {string}
     * @memberof FAWebPageChannel
     */
    'image_url': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FAWebPageChannel
     */
    'enabled': boolean | null;
    /**
     * 
     * @type {Array<{ [key: string]: string; }>}
     * @memberof FAWebPageChannel
     */
    'scraper_seeds': Array<{ [key: string]: string; }> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAWebPageChannel
     */
    'include_path_patterns': Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAWebPageChannel
     */
    'exclude_path_patterns': Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof FAWebPageChannel
     */
    'scraper_follow_web_page_links': boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof FAWebPageChannel
     */
    'scraper_follow_feed_links': boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof FAWebPageChannel
     */
    'scraper_follow_sitemap_links': boolean | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface UrlRequest
 */
export interface UrlRequest {
    /**
     * 
     * @type {string}
     * @memberof UrlRequest
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Detailed health check endpoint
         * @summary Detailed Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailedHealthCheckApiV1HealthDetailedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health/detailed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Frontend Audio For Url
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frontendAudioForUrlApiV1FrontendAudioForUrlGet: async (url: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('frontendAudioForUrlApiV1FrontendAudioForUrlGet', 'url', url)
            const localVarPath = `/api/v1/frontend-audio-for-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Frontend Audio Play
         * @param {string} userId 
         * @param {string} audioId 
         * @param {number} durationSeconds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frontendAudioPlayApiV1FrontendAudioPlayPost: async (userId: string, audioId: string, durationSeconds: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('frontendAudioPlayApiV1FrontendAudioPlayPost', 'userId', userId)
            // verify required parameter 'audioId' is not null or undefined
            assertParamExists('frontendAudioPlayApiV1FrontendAudioPlayPost', 'audioId', audioId)
            // verify required parameter 'durationSeconds' is not null or undefined
            assertParamExists('frontendAudioPlayApiV1FrontendAudioPlayPost', 'durationSeconds', durationSeconds)
            const localVarPath = `/api/v1/frontend-audio-play`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (audioId !== undefined) {
                localVarQueryParameter['audio_id'] = audioId;
            }

            if (durationSeconds !== undefined) {
                localVarQueryParameter['duration_seconds'] = durationSeconds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Frontend Audio Plays For User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet', 'userId', userId)
            const localVarPath = `/api/v1/frontend-audio-plays-for-user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Channel By Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelByIdApiV1WebPageChannelByIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getChannelByIdApiV1WebPageChannelByIdGet', 'id', id)
            const localVarPath = `/api/v1/web-page-channel-by-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Channel By Url
         * @param {UrlRequest} urlRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelByUrlApiV1WebPageChannelByUrlGet: async (urlRequest: UrlRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'urlRequest' is not null or undefined
            assertParamExists('getChannelByUrlApiV1WebPageChannelByUrlGet', 'urlRequest', urlRequest)
            const localVarPath = `/api/v1/web-page-channel-by-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(urlRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Web Page Channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebPageChannelsApiV1WebPageChannelsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/web-page-channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Web Pages By Channel Id
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet: async (channelId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet', 'channelId', channelId)
            const localVarPath = `/api/v1/get-web-pages-by-channel-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Basic health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Frontend Audios Similar For Text
         * @param {string} text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost: async (text: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost', 'text', text)
            const localVarPath = `/api/v1/frontend-audio-results-similar-for-text`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Web Pages
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWebPagesApiV1WebPagesGet: async (url: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('readWebPagesApiV1WebPagesGet', 'url', url)
            const localVarPath = `/api/v1/web-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Scraper Run
         * @param {FAWebPageChannel} fAWebPageChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scraperRunApiV1ScraperRunPost: async (fAWebPageChannel: FAWebPageChannel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fAWebPageChannel' is not null or undefined
            assertParamExists('scraperRunApiV1ScraperRunPost', 'fAWebPageChannel', fAWebPageChannel)
            const localVarPath = `/api/v1/scraper-run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fAWebPageChannel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Scraper Stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scraperStopApiV1ScraperStopPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/scraper-stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert Web Page Channel
         * @param {FAWebPageChannel} fAWebPageChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertWebPageChannelApiV1WebPageChannelPost: async (fAWebPageChannel: FAWebPageChannel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fAWebPageChannel' is not null or undefined
            assertParamExists('upsertWebPageChannelApiV1WebPageChannelPost', 'fAWebPageChannel', fAWebPageChannel)
            const localVarPath = `/api/v1/web-page-channel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fAWebPageChannel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Detailed health check endpoint
         * @summary Detailed Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailedHealthCheckApiV1HealthDetailedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailedHealthCheckApiV1HealthDetailedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.detailedHealthCheckApiV1HealthDetailedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Frontend Audio For Url
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async frontendAudioForUrlApiV1FrontendAudioForUrlGet(url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAFrontendAudio>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.frontendAudioForUrlApiV1FrontendAudioForUrlGet(url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.frontendAudioForUrlApiV1FrontendAudioForUrlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Frontend Audio Play
         * @param {string} userId 
         * @param {string} audioId 
         * @param {number} durationSeconds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async frontendAudioPlayApiV1FrontendAudioPlayPost(userId: string, audioId: string, durationSeconds: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.frontendAudioPlayApiV1FrontendAudioPlayPost(userId, audioId, durationSeconds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.frontendAudioPlayApiV1FrontendAudioPlayPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Frontend Audio Plays For User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FAFrontendAudioPlay>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Channel By Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelByIdApiV1WebPageChannelByIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAWebPageChannel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelByIdApiV1WebPageChannelByIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChannelByIdApiV1WebPageChannelByIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Channel By Url
         * @param {UrlRequest} urlRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelByUrlApiV1WebPageChannelByUrlGet(urlRequest: UrlRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAWebPageChannel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelByUrlApiV1WebPageChannelByUrlGet(urlRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getChannelByUrlApiV1WebPageChannelByUrlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Web Page Channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebPageChannelsApiV1WebPageChannelsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FAWebPageChannel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebPageChannelsApiV1WebPageChannelsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWebPageChannelsApiV1WebPageChannelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Web Pages By Channel Id
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet(channelId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FAWebPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet(channelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Basic health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiV1HealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckApiV1HealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Post Frontend Audios Similar For Text
         * @param {string} text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost(text: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FAFrontendAudioSearchResult>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost(text, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Web Pages
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readWebPagesApiV1WebPagesGet(url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAWebPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readWebPagesApiV1WebPagesGet(url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readWebPagesApiV1WebPagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Scraper Run
         * @param {FAWebPageChannel} fAWebPageChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scraperRunApiV1ScraperRunPost(fAWebPageChannel: FAWebPageChannel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAScraperStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scraperRunApiV1ScraperRunPost(fAWebPageChannel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scraperRunApiV1ScraperRunPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Scraper Stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scraperStopApiV1ScraperStopPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scraperStopApiV1ScraperStopPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scraperStopApiV1ScraperStopPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upsert Web Page Channel
         * @param {FAWebPageChannel} fAWebPageChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertWebPageChannelApiV1WebPageChannelPost(fAWebPageChannel: FAWebPageChannel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertWebPageChannelApiV1WebPageChannelPost(fAWebPageChannel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.upsertWebPageChannelApiV1WebPageChannelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Detailed health check endpoint
         * @summary Detailed Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailedHealthCheckApiV1HealthDetailedGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.detailedHealthCheckApiV1HealthDetailedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Frontend Audio For Url
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frontendAudioForUrlApiV1FrontendAudioForUrlGet(url: string, options?: RawAxiosRequestConfig): AxiosPromise<FAFrontendAudio> {
            return localVarFp.frontendAudioForUrlApiV1FrontendAudioForUrlGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Frontend Audio Play
         * @param {string} userId 
         * @param {string} audioId 
         * @param {number} durationSeconds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frontendAudioPlayApiV1FrontendAudioPlayPost(userId: string, audioId: string, durationSeconds: number, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.frontendAudioPlayApiV1FrontendAudioPlayPost(userId, audioId, durationSeconds, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Frontend Audio Plays For User
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FAFrontendAudioPlay>> {
            return localVarFp.frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Channel By Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelByIdApiV1WebPageChannelByIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<FAWebPageChannel> {
            return localVarFp.getChannelByIdApiV1WebPageChannelByIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Channel By Url
         * @param {UrlRequest} urlRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelByUrlApiV1WebPageChannelByUrlGet(urlRequest: UrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<FAWebPageChannel> {
            return localVarFp.getChannelByUrlApiV1WebPageChannelByUrlGet(urlRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Web Page Channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebPageChannelsApiV1WebPageChannelsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FAWebPageChannel>> {
            return localVarFp.getWebPageChannelsApiV1WebPageChannelsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Web Pages By Channel Id
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet(channelId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FAWebPage>> {
            return localVarFp.getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Basic health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckApiV1HealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Frontend Audios Similar For Text
         * @param {string} text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost(text: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FAFrontendAudioSearchResult>> {
            return localVarFp.postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost(text, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Web Pages
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWebPagesApiV1WebPagesGet(url: string, options?: RawAxiosRequestConfig): AxiosPromise<FAWebPage> {
            return localVarFp.readWebPagesApiV1WebPagesGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Scraper Run
         * @param {FAWebPageChannel} fAWebPageChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scraperRunApiV1ScraperRunPost(fAWebPageChannel: FAWebPageChannel, options?: RawAxiosRequestConfig): AxiosPromise<FAScraperStats> {
            return localVarFp.scraperRunApiV1ScraperRunPost(fAWebPageChannel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Scraper Stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scraperStopApiV1ScraperStopPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.scraperStopApiV1ScraperStopPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert Web Page Channel
         * @param {FAWebPageChannel} fAWebPageChannel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertWebPageChannelApiV1WebPageChannelPost(fAWebPageChannel: FAWebPageChannel, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.upsertWebPageChannelApiV1WebPageChannelPost(fAWebPageChannel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Detailed health check endpoint
     * @summary Detailed Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailedHealthCheckApiV1HealthDetailedGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).detailedHealthCheckApiV1HealthDetailedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Frontend Audio For Url
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public frontendAudioForUrlApiV1FrontendAudioForUrlGet(url: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).frontendAudioForUrlApiV1FrontendAudioForUrlGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Frontend Audio Play
     * @param {string} userId 
     * @param {string} audioId 
     * @param {number} durationSeconds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public frontendAudioPlayApiV1FrontendAudioPlayPost(userId: string, audioId: string, durationSeconds: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).frontendAudioPlayApiV1FrontendAudioPlayPost(userId, audioId, durationSeconds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Frontend Audio Plays For User
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet(userId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).frontendAudioPlaysForUserApiV1FrontendAudioPlaysForUserGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Channel By Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChannelByIdApiV1WebPageChannelByIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChannelByIdApiV1WebPageChannelByIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Channel By Url
     * @param {UrlRequest} urlRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getChannelByUrlApiV1WebPageChannelByUrlGet(urlRequest: UrlRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getChannelByUrlApiV1WebPageChannelByUrlGet(urlRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Web Page Channels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWebPageChannelsApiV1WebPageChannelsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWebPageChannelsApiV1WebPageChannelsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Web Pages By Channel Id
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet(channelId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWebPagesByChannelIdApiV1GetWebPagesByChannelIdGet(channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Basic health check endpoint
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckApiV1HealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Frontend Audios Similar For Text
     * @param {string} text 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost(text: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postFrontendAudiosSimilarForTextApiV1FrontendAudioResultsSimilarForTextPost(text, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Web Pages
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readWebPagesApiV1WebPagesGet(url: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readWebPagesApiV1WebPagesGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Scraper Run
     * @param {FAWebPageChannel} fAWebPageChannel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scraperRunApiV1ScraperRunPost(fAWebPageChannel: FAWebPageChannel, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scraperRunApiV1ScraperRunPost(fAWebPageChannel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Scraper Stop
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scraperStopApiV1ScraperStopPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scraperStopApiV1ScraperStopPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert Web Page Channel
     * @param {FAWebPageChannel} fAWebPageChannel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upsertWebPageChannelApiV1WebPageChannelPost(fAWebPageChannel: FAWebPageChannel, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upsertWebPageChannelApiV1WebPageChannelPost(fAWebPageChannel, options).then((request) => request(this.axios, this.basePath));
    }
}



