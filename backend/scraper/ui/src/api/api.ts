/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface FADomainStats
 */
export interface FADomainStats {
    /**
     * 
     * @type {string}
     * @memberof FADomainStats
     */
    'domain': string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof FADomainStats
     */
    'frequent_subpaths': { [key: string]: number; };
}
/**
 * 
 * @export
 * @interface FAScraperStats
 */
export interface FAScraperStats {
    /**
     * 
     * @type {number}
     * @memberof FAScraperStats
     */
    'initiated_urls_count': number;
    /**
     * 
     * @type {number}
     * @memberof FAScraperStats
     */
    'requested_urls_count': number;
    /**
     * 
     * @type {number}
     * @memberof FAScraperStats
     */
    'completed_urls_count': number;
    /**
     * 
     * @type {{ [key: string]: FADomainStats; }}
     * @memberof FAScraperStats
     */
    'domain_stats': { [key: string]: FADomainStats; };
}
/**
 * 
 * @export
 * @interface FAWebPageSeed
 */
export interface FAWebPageSeed {
    /**
     * 
     * @type {string}
     * @memberof FAWebPageSeed
     */
    'normalized_url_hash': string;
    /**
     * 
     * @type {string}
     * @memberof FAWebPageSeed
     */
    'normalized_url': string;
    /**
     * 
     * @type {string}
     * @memberof FAWebPageSeed
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof FAWebPageSeed
     */
    'max_depth': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAWebPageSeed
     */
    'url_patterns': Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof FAWebPageSeed
     */
    'use_headless_browser': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof FAWebPageSeed
     */
    'allowed_domains': Array<string> | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ScraperStartRequest
 */
export interface ScraperStartRequest {
    /**
     * 
     * @type {string}
     * @memberof ScraperStartRequest
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof ScraperStartRequest
     */
    'max_depth': number;
    /**
     * 
     * @type {boolean}
     * @memberof ScraperStartRequest
     */
    'no_cache': boolean;
}
/**
 * 
 * @export
 * @interface UpsertWebPageSeedRequest
 */
export interface UpsertWebPageSeedRequest {
    /**
     * 
     * @type {string}
     * @memberof UpsertWebPageSeedRequest
     */
    'normalized_url_hash': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertWebPageSeedRequest
     */
    'normalized_url': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertWebPageSeedRequest
     */
    'url': string;
    /**
     * 
     * @type {number}
     * @memberof UpsertWebPageSeedRequest
     */
    'max_depth': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpsertWebPageSeedRequest
     */
    'url_patterns': Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpsertWebPageSeedRequest
     */
    'use_headless_browser': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof UpsertWebPageSeedRequest
     */
    'allowed_domains': Array<string> | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Detailed health check endpoint
         * @summary Detailed Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailedHealthCheckApiV1HealthDetailedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health/detailed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Basic health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Web Page Seeds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWebPageSeedsApiV1WebPageSeedsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/web-page-seeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Web Pages
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWebPagesApiV1WebPagesGet: async (url: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('readWebPagesApiV1WebPagesGet', 'url', url)
            const localVarPath = `/api/v1/web-pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Scraper Start
         * @param {ScraperStartRequest} scraperStartRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scraperStartApiV1ScraperRunPost: async (scraperStartRequest: ScraperStartRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scraperStartRequest' is not null or undefined
            assertParamExists('scraperStartApiV1ScraperRunPost', 'scraperStartRequest', scraperStartRequest)
            const localVarPath = `/api/v1/scraper-run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scraperStartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Scraper Stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scraperStopApiV1ScraperStopPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/scraper-stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upsert Web Page Seed
         * @param {UpsertWebPageSeedRequest} upsertWebPageSeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertWebPageSeedApiV1WebPageSeedsPost: async (upsertWebPageSeedRequest: UpsertWebPageSeedRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertWebPageSeedRequest' is not null or undefined
            assertParamExists('upsertWebPageSeedApiV1WebPageSeedsPost', 'upsertWebPageSeedRequest', upsertWebPageSeedRequest)
            const localVarPath = `/api/v1/web-page-seeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertWebPageSeedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Detailed health check endpoint
         * @summary Detailed Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailedHealthCheckApiV1HealthDetailedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailedHealthCheckApiV1HealthDetailedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.detailedHealthCheckApiV1HealthDetailedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Basic health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiV1HealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheckApiV1HealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Web Page Seeds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readWebPageSeedsApiV1WebPageSeedsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FAWebPageSeed>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readWebPageSeedsApiV1WebPageSeedsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readWebPageSeedsApiV1WebPageSeedsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Web Pages
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readWebPagesApiV1WebPagesGet(url: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readWebPagesApiV1WebPagesGet(url, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.readWebPagesApiV1WebPagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Scraper Start
         * @param {ScraperStartRequest} scraperStartRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scraperStartApiV1ScraperRunPost(scraperStartRequest: ScraperStartRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FAScraperStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scraperStartApiV1ScraperRunPost(scraperStartRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scraperStartApiV1ScraperRunPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Scraper Stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scraperStopApiV1ScraperStopPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scraperStopApiV1ScraperStopPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scraperStopApiV1ScraperStopPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upsert Web Page Seed
         * @param {UpsertWebPageSeedRequest} upsertWebPageSeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upsertWebPageSeedApiV1WebPageSeedsPost(upsertWebPageSeedRequest: UpsertWebPageSeedRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upsertWebPageSeedApiV1WebPageSeedsPost(upsertWebPageSeedRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.upsertWebPageSeedApiV1WebPageSeedsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Detailed health check endpoint
         * @summary Detailed Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailedHealthCheckApiV1HealthDetailedGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.detailedHealthCheckApiV1HealthDetailedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Basic health check endpoint
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthCheckApiV1HealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Web Page Seeds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWebPageSeedsApiV1WebPageSeedsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<FAWebPageSeed>> {
            return localVarFp.readWebPageSeedsApiV1WebPageSeedsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Web Pages
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readWebPagesApiV1WebPagesGet(url: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.readWebPagesApiV1WebPagesGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Scraper Start
         * @param {ScraperStartRequest} scraperStartRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scraperStartApiV1ScraperRunPost(scraperStartRequest: ScraperStartRequest, options?: RawAxiosRequestConfig): AxiosPromise<FAScraperStats> {
            return localVarFp.scraperStartApiV1ScraperRunPost(scraperStartRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Scraper Stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scraperStopApiV1ScraperStopPost(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.scraperStopApiV1ScraperStopPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upsert Web Page Seed
         * @param {UpsertWebPageSeedRequest} upsertWebPageSeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upsertWebPageSeedApiV1WebPageSeedsPost(upsertWebPageSeedRequest: UpsertWebPageSeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.upsertWebPageSeedApiV1WebPageSeedsPost(upsertWebPageSeedRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Detailed health check endpoint
     * @summary Detailed Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailedHealthCheckApiV1HealthDetailedGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).detailedHealthCheckApiV1HealthDetailedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Basic health check endpoint
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheckApiV1HealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheckApiV1HealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Web Page Seeds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readWebPageSeedsApiV1WebPageSeedsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readWebPageSeedsApiV1WebPageSeedsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Web Pages
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public readWebPagesApiV1WebPagesGet(url: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).readWebPagesApiV1WebPagesGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Scraper Start
     * @param {ScraperStartRequest} scraperStartRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scraperStartApiV1ScraperRunPost(scraperStartRequest: ScraperStartRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scraperStartApiV1ScraperRunPost(scraperStartRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Scraper Stop
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scraperStopApiV1ScraperStopPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scraperStopApiV1ScraperStopPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upsert Web Page Seed
     * @param {UpsertWebPageSeedRequest} upsertWebPageSeedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upsertWebPageSeedApiV1WebPageSeedsPost(upsertWebPageSeedRequest: UpsertWebPageSeedRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).upsertWebPageSeedApiV1WebPageSeedsPost(upsertWebPageSeedRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



